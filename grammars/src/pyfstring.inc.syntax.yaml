---
fstring-fnorm-quoted-${line}-line:
  name: meta.fstring.scenic
  begin: (\b[fF])([bBuU])?(${marker})
  end: (\3)${guard}
  beginCaptures:
    # "storage.type.string.scenic" class should be the first one,
    # because Atom, VSCode and GitHub don't understand scopes
    # separated by whitespace, and simply use the first one
    # of them.  Highlighting 'f' as 'storage.type' is more
    # important for us than having other scopes.
    '1': {name: storage.type.string.scenic
                string.quoted.${line}.scenic
                string.interpolated.scenic}
    '2': {name: invalid.illegal.prefix.scenic}
    '3': {name: string.quoted.${line}.scenic
                string.interpolated.scenic
                punctuation.definition.string.begin.scenic}
  endCaptures:
    '1': {name: string.quoted.${line}.scenic
                string.interpolated.scenic
                punctuation.definition.string.end.scenic}
    '2': {name: invalid.illegal.newline.scenic}
  patterns:
    - include: '#fstring-guts'
    - include: '#fstring-illegal-${line}-brace'
    - include: '#fstring-${line}-brace'
    - include: '#fstring-${line}-core'

fstring-normf-quoted-${line}-line:
  name: meta.fstring.scenic
  begin: (\b[bBuU])([fF])(${marker})
  end: (\3)${guard}
  beginCaptures:
    '1': {name: invalid.illegal.prefix.scenic}
    '2': {name: storage.type.string.scenic
                string.quoted.${line}.scenic
                string.interpolated.scenic}
    '3': {name: string.quoted.${line}.scenic
                punctuation.definition.string.begin.scenic}
  endCaptures:
    '1': {name: string.quoted.${line}.scenic
                string.interpolated.scenic
                punctuation.definition.string.end.scenic}
    '2': {name: invalid.illegal.newline.scenic}
  patterns:
    - include: '#fstring-guts'
    - include: '#fstring-illegal-${line}-brace'
    - include: '#fstring-${line}-brace'
    - include: '#fstring-${line}-core'

fstring-raw-quoted-${line}-line:
  name: meta.fstring.scenic
  begin: (\b(?:[rR][fF]|[fF][rR]))(${marker})
  end: (\2)${guard}
  beginCaptures:
    '1': {name: storage.type.string.scenic
                string.quoted.raw.${line}.scenic
                string.interpolated.scenic}
    '2': {name: string.quoted.raw.${line}.scenic
                punctuation.definition.string.begin.scenic}
  endCaptures:
    '1': {name: string.quoted.raw.${line}.scenic
                string.interpolated.scenic
                punctuation.definition.string.end.scenic}
    '2': {name: invalid.illegal.newline.scenic}
  patterns:
    - include: '#fstring-raw-guts'
    - include: '#fstring-illegal-${line}-brace'
    - include: '#fstring-${line}-brace'
    - include: '#fstring-raw-${line}-core'

fstring-${line}-core:
  name: string.quoted.${line}.scenic string.interpolated.scenic
  match: |
    (?x)
      (.+?)
        (
          (?# .* and .*? in multi-line match need special handling of
            newlines otherwise SublimeText and Atom will match slightly
            differently.

            The guard for newlines has to be separate from the
            lookahead because of special $ matching rule.)
          ($\n?)
          |
          (?=[\\\}\{]|${marker}${guard})
        )
      (?# due to how multiline regexps are matched we need a special case
        for matching a newline character)
      | \n

fstring-raw-${line}-core:
  name: string.quoted.raw.${line}.scenic string.interpolated.scenic
  match: |
    (?x)
      (.+?)
        (
          (?# .* and .*? in multi-line match need special handling of
            newlines otherwise SublimeText and Atom will match slightly
            differently.

            The guard for newlines has to be separate from the
            lookahead because of special $ matching rule.)
          ($\n?)
          |
          (?=[\\\}\{]|${marker}${guard})
        )
      (?# due to how multiline regexps are matched we need a special case
        for matching a newline character)
      | \n

fstring-${line}-brace:
  comment: value interpolation using { ... }
  begin: (\{)
  end: |
    (?x)
      (\})${fguard}
  beginCaptures:
    '1': {name: constant.character.format.placeholder.other.scenic}
  endCaptures:
    '1': {name: constant.character.format.placeholder.other.scenic}
  patterns:
    - include: '#fstring-terminator-${line}'
    - include: '#f-expression'

fstring-terminator-${line}:
  patterns:
    - name: storage.type.format.scenic
      match: (=(![rsa])?)(?=})
    - name: storage.type.format.scenic
      match: (=?![rsa])(?=})
    - match: |
        (?x)
          ( (?: =?) (?: ![rsa])? )
            ( : \w? [<>=^]? [-+ ]? \#?
              \d* ,? (\.\d+)? [bcdeEfFgGnosxX%]? )(?=})
      captures:
        # We use this awkward scope name instead of perhaps more
        # elegant "support.other.format.scenic" because it appears
        # that by default it gives a better visual result in various
        # systems (e.g. GitHub). This is due to the fact that
        # "storage.type..." is more likely to have special
        # highlighting in any given color scheme than
        # "support.other..."
        #
        '1': {name: storage.type.format.scenic}
        '2': {name: storage.type.format.scenic}

    - include: '#fstring-terminator-${line}-tail'

fstring-terminator-${line}-tail:
  begin: ((?:=?)(?:![rsa])?)(:)(?=.*?{)
  end: (?=})${fguard}
  beginCaptures:
    '1': {name: storage.type.format.scenic}
    '2': {name: storage.type.format.scenic}

  patterns:
    - include: '#fstring-illegal-${line}-brace'
    - include: '#fstring-${line}-brace'
    - name: storage.type.format.scenic
      match: ([bcdeEfFgGnosxX%])(?=})
    - name: storage.type.format.scenic
      match: (\.\d+)
    - name: storage.type.format.scenic
      match: (,)
    - name: storage.type.format.scenic
      match: (\d+)
    - name: storage.type.format.scenic
      match: (\#)
    - name: storage.type.format.scenic
      match: ([-+ ])
    - name: storage.type.format.scenic
      match: ([<>=^])
    - name: storage.type.format.scenic
      match: (\w)
...
